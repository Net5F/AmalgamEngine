#include "Morton.h"
#include "libmorton/morton.h"
#include <cstdint>

namespace AM
{
/** A lookup table of morton code values, for up to a 16x16 value space. 
    Note: If you're trying to understand the ordering, look at the wiki page.
          This initializer visually has the X and Y axis flipped. */
static constexpr std::array<std::array<Uint8, 16>, 16> zValues16x16{
    {{0, 2, 8, 10, 32, 34, 40, 42, 128, 130, 136, 138, 160, 162, 168, 170},
     {1, 3, 9, 11, 33, 35, 41, 43, 129, 131, 137, 139, 161, 163, 169, 171},
     {4, 6, 12, 14, 36, 38, 44, 46, 132, 134, 140, 142, 164, 166, 172, 174},
     {5, 7, 13, 15, 37, 39, 45, 47, 133, 135, 141, 143, 165, 167, 173, 175},
     {16, 18, 24, 26, 48, 50, 56, 58, 144, 146, 152, 154, 176, 178, 184, 186},
     {17, 19, 25, 27, 49, 51, 57, 59, 145, 147, 153, 155, 177, 179, 185, 187},
     {20, 22, 28, 30, 52, 54, 60, 62, 148, 150, 156, 158, 180, 182, 188, 190},
     {21, 23, 29, 31, 53, 55, 61, 63, 149, 151, 157, 159, 181, 183, 189, 191},
     {64, 66, 72, 74, 96, 98, 104, 106, 192, 194, 200, 202, 224, 226, 232, 234},
     {65, 67, 73, 75, 97, 99, 105, 107, 193, 195, 201, 203, 225, 227, 233, 235},
     {68, 70, 76, 78, 100, 102, 108, 110, 196, 198, 204, 206, 228, 230, 236,
      238},
     {69, 71, 77, 79, 101, 103, 109, 111, 197, 199, 205, 207, 229, 231, 237,
      239},
     {80, 82, 88, 90, 112, 114, 120, 122, 208, 210, 216, 218, 240, 242, 248,
      250},
     {81, 83, 89, 91, 113, 115, 121, 123, 209, 211, 217, 219, 241, 243, 249,
      251},
     {84, 86, 92, 94, 116, 118, 124, 126, 212, 214, 220, 222, 244, 246, 252,
      254},
     {85, 87, 93, 95, 117, 119, 125, 127, 213, 215, 221, 223, 245, 247, 253,
      255}}};

/** A reverse lookup table of x/y values given a morton code, for up to a 
    16x16 value space. */
static constexpr std::array<Morton::Result2D<Uint8>, 256> xyValues16x16{
    {{0, 0},   {1, 0},   {0, 1},   {1, 1},   {2, 0},   {3, 0},   {2, 1},
     {3, 1},   {0, 2},   {1, 2},   {0, 3},   {1, 3},   {2, 2},   {3, 2},
     {2, 3},   {3, 3},   {4, 0},   {5, 0},   {4, 1},   {5, 1},   {6, 0},
     {7, 0},   {6, 1},   {7, 1},   {4, 2},   {5, 2},   {4, 3},   {5, 3},
     {6, 2},   {7, 2},   {6, 3},   {7, 3},   {0, 4},   {1, 4},   {0, 5},
     {1, 5},   {2, 4},   {3, 4},   {2, 5},   {3, 5},   {0, 6},   {1, 6},
     {0, 7},   {1, 7},   {2, 6},   {3, 6},   {2, 7},   {3, 7},   {4, 4},
     {5, 4},   {4, 5},   {5, 5},   {6, 4},   {7, 4},   {6, 5},   {7, 5},
     {4, 6},   {5, 6},   {4, 7},   {5, 7},   {6, 6},   {7, 6},   {6, 7},
     {7, 7},   {8, 0},   {9, 0},   {8, 1},   {9, 1},   {10, 0},  {11, 0},
     {10, 1},  {11, 1},  {8, 2},   {9, 2},   {8, 3},   {9, 3},   {10, 2},
     {11, 2},  {10, 3},  {11, 3},  {12, 0},  {13, 0},  {12, 1},  {13, 1},
     {14, 0},  {15, 0},  {14, 1},  {15, 1},  {12, 2},  {13, 2},  {12, 3},
     {13, 3},  {14, 2},  {15, 2},  {14, 3},  {15, 3},  {8, 4},   {9, 4},
     {8, 5},   {9, 5},   {10, 4},  {11, 4},  {10, 5},  {11, 5},  {8, 6},
     {9, 6},   {8, 7},   {9, 7},   {10, 6},  {11, 6},  {10, 7},  {11, 7},
     {12, 4},  {13, 4},  {12, 5},  {13, 5},  {14, 4},  {15, 4},  {14, 5},
     {15, 5},  {12, 6},  {13, 6},  {12, 7},  {13, 7},  {14, 6},  {15, 6},
     {14, 7},  {15, 7},  {0, 8},   {1, 8},   {0, 9},   {1, 9},   {2, 8},
     {3, 8},   {2, 9},   {3, 9},   {0, 10},  {1, 10},  {0, 11},  {1, 11},
     {2, 10},  {3, 10},  {2, 11},  {3, 11},  {4, 8},   {5, 8},   {4, 9},
     {5, 9},   {6, 8},   {7, 8},   {6, 9},   {7, 9},   {4, 10},  {5, 10},
     {4, 11},  {5, 11},  {6, 10},  {7, 10},  {6, 11},  {7, 11},  {0, 12},
     {1, 12},  {0, 13},  {1, 13},  {2, 12},  {3, 12},  {2, 13},  {3, 13},
     {0, 14},  {1, 14},  {0, 15},  {1, 15},  {2, 14},  {3, 14},  {2, 15},
     {3, 15},  {4, 12},  {5, 12},  {4, 13},  {5, 13},  {6, 12},  {7, 12},
     {6, 13},  {7, 13},  {4, 14},  {5, 14},  {4, 15},  {5, 15},  {6, 14},
     {7, 14},  {6, 15},  {7, 15},  {8, 8},   {9, 8},   {8, 9},   {9, 9},
     {10, 8},  {11, 8},  {10, 9},  {11, 9},  {8, 10},  {9, 10},  {8, 11},
     {9, 11},  {10, 10}, {11, 10}, {10, 11}, {11, 11}, {12, 8},  {13, 8},
     {12, 9},  {13, 9},  {14, 8},  {15, 8},  {14, 9},  {15, 9},  {12, 10},
     {13, 10}, {12, 11}, {13, 11}, {14, 10}, {15, 10}, {14, 11}, {15, 11},
     {8, 12},  {9, 12},  {8, 13},  {9, 13},  {10, 12}, {11, 12}, {10, 13},
     {11, 13}, {8, 14},  {9, 14},  {8, 15},  {9, 15},  {10, 14}, {11, 14},
     {10, 15}, {11, 15}, {12, 12}, {13, 12}, {12, 13}, {13, 13}, {14, 12},
     {15, 12}, {14, 13}, {15, 13}, {12, 14}, {13, 14}, {12, 15}, {13, 15},
     {14, 14}, {15, 14}, {14, 15}, {15, 15}}};

static constexpr Uint64 magicbit2D_masks64[6]
    = {0x00000000FFFFFFFF, 0x0000FFFF0000FFFF, 0x00FF00FF00FF00FF,
       0x0F0F0F0F0F0F0F0F, 0x3333333333333333, 0x5555555555555555};

Uint8 Morton::encode16x16(Uint8 x, Uint8 y)
{
    return static_cast<Uint8>(zValues16x16[x][y]);
}

Morton::Result2D<Uint8> Morton::decode16x16(Uint8 code)
{
    return xyValues16x16[code];
}

Uint32 Morton::encode32(Uint16 x, Uint16 y)
{
    return libmorton::morton2D_32_encode(x, y);
}

Uint64 Morton::encode64(Uint32 x, Uint32 y)
{
    return libmorton::morton2D_64_encode(x, y);
}

Morton::Result2D<Uint16> Morton::decode32(Uint32 code)
{
    uint_fast16_t x{};
    uint_fast16_t y{};
    libmorton::morton2D_32_decode(code, x, y);

    return {static_cast<Uint16>(x), static_cast<Uint16>(y)};
}

Morton::Result2D<Uint32> Morton::decode64(Uint64 code)
{
    uint_fast32_t x{};
    uint_fast32_t y{};
    libmorton::morton2D_64_decode(code, x, y);

    return {static_cast<Uint32>(x), static_cast<Uint32>(y)};
}

} // End namespace AM
